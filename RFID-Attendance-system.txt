#include <SPI.h>
#include <MFRC522.h>
#include <LiquidCrystal_I2C.h>
#include <Wire.h>
#include <TimeLib.h>
#include <DS1307RTC.h>
#include <String.h>
LiquidCrystal_I2C lcd(0x27, 16, 2);
#define chip_1 0x50    //Address of 24LC256 eeprom chip
#define SS_PIN 10
#define RST_PIN 9
#define buzz 2
#define button_1 A0
#define button_2 A1
#define button_3 A2
unsigned int ID = 0;
unsigned int list = 1;
unsigned int data = 0;
MFRC522 rfid(SS_PIN, RST_PIN);
MFRC522::MIFARE_Key key;

//-------------------------------------------------------------------------------------//
int max_database_size = 10; // Number of UIDs
const char* database[] = {"NULL", "55:7D:AA:C4", "05:2C:AA:C4", "65:7D:AF:C4", "55:CB:AF:C4", "15:9F:A4:C4", "45:8A:AF:C4", "65:1D:AF:C4", "C5:E4:AD:C4", "15:9F:A5:C4", "45:B8:AF:C4"};
//-------------------------------------------------------------------------------------//

void setup()
{
  pinMode(buzz, OUTPUT);
  pinMode(button_1, INPUT_PULLUP);
  pinMode(button_2, INPUT_PULLUP);
  pinMode(button_3, INPUT_PULLUP);
  lcd.init();
  lcd.backlight();
  lcd.setCursor(0, 0);
  lcd.print(F("RFID ATTENDANCE"));
  lcd.setCursor(0, 1);
  lcd.print(F("     SYSTEM    "));
  delay(2000);
  if ((eeprom_read(chip_1, 0)) != 100)
  {
    for (int i = 0; i <= 100; i++)
    {
      eeprom_write(chip_1, i, 0);
    }
    eeprom_write(chip_1, 0, 100);
  }
  lcd.clear();
  SPI.begin();
  rfid.PCD_Init();
  max_database_size += 1;
}

void loop()
{
  if (digitalRead(button_1) == LOW || digitalRead(button_2) == LOW)
  {
    delay(150);
    lcd.clear();
    list = 1;
    while (true)
    {
      lcd.setCursor(0, 0);
      lcd.print(F("Attendance No:"));
      (list < 10) ?  (lcd.print("0"), lcd.print(list)) : lcd.print(list);
      lcd.print(list);
      lcd.setCursor(0, 1);
      lcd.print(eeprom_read(chip_1, list));
      if (digitalRead(button_1) == LOW)
      {
        list += 1;
        if (list > 99) list = 1;
        lcd.setCursor(0, 1);
        lcd.print("                ");
      }
      if (digitalRead(button_2) == LOW)
      {
        list -= 1;
        if (list < 1) list = 99;
        lcd.setCursor(0, 1);
        lcd.print("                ");
      }
      if (digitalRead(button_3) == LOW)
      {
        lcd.clear();
        break;
      }
      delay(150);
    }
  }
  if (digitalRead(button_2) == LOW && digitalRead(button_3) == LOW)
  {
    for (int i = 1; i <= 100; i++)
    {
      eeprom_write(chip_1, i, 0);
    }
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print(F(" MEMORY  CLEARED"));
    lcd.setCursor(0, 1);
    lcd.print("****************");
    for (int x = 0; x < 3; x++)
    {
      digitalWrite(buzz, HIGH);
      delay(100);
      digitalWrite(buzz, LOW);
      delay(100);
    }
    delay(2000);
    lcd.clear();
  }
  tmElements_t tm;
  if (RTC.read(tm))
  {
    lcd.setCursor(0, 0);
    lcd.print(F("TIME:"));
    (tm.Hour >= 10) ?  (lcd.print(tm.Hour)) : (lcd.print('0'), lcd.print(tm.Hour));
    lcd.print(":");
    (tm.Minute >= 10) ?  (lcd.print(tm.Minute)) : (lcd.print('0'), lcd.print(tm.Minute));
    lcd.print(":");
    (tm.Second >= 10) ?  (lcd.print(tm.Second)) : (lcd.print('0'), lcd.print(tm.Second));
    lcd.setCursor(0, 1);
    lcd.print("DATE:");
    (tm.Day >= 10) ?  (lcd.print(tm.Day)) : (lcd.print('0'), lcd.print(tm.Day));
    lcd.print("/");
    (tm.Month >= 10) ?  (lcd.print(tm.Month)) : (lcd.print('0'), lcd.print(tm.Month));
    lcd.print("/");
    lcd.print(tmYearToCalendar(tm.Year));
  }
  if ( ! rfid.PICC_IsNewCardPresent())
    return;
  if ( ! rfid.PICC_ReadCardSerial())
    return;
  MFRC522::PICC_Type piccType = rfid.PICC_GetType(rfid.uid.sak);
  if (piccType != MFRC522::PICC_TYPE_MIFARE_MINI && piccType != MFRC522::PICC_TYPE_MIFARE_1K && piccType != MFRC522::PICC_TYPE_MIFARE_4K)
  {
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print(F("UNKNOWN CARD "));
    lcd.setCursor(0, 1);
    lcd.print(F("TYPE DETECTED"));
    for (int x = 0; x < 3; x++)
    {
      digitalWrite(buzz, HIGH);
      delay(100);
      digitalWrite(buzz, LOW);
      delay(100);
    }
    delay(2500);
    lcd.clear();
    return;
  }
  String StrID = "" ;
  for (byte i = 0; i < 4; i ++)
  {
    StrID += (rfid.uid.uidByte[i] < 0x10 ? "0" : "") + String(rfid.uid.uidByte[i], HEX) + (i != 3 ? ":" : "" );
  }
  StrID.toUpperCase();
  rfid.PICC_HaltA ();
  rfid.PCD_StopCrypto1 ();
  for (ID = 1; ID < max_database_size; ID++)
  {
    if (StrID == database[ID])
    {
      data =  eeprom_read(chip_1, ID) + 1;
      if (data > 255)
      {
        lcd.clear();
        lcd.setCursor(0, 0);
        lcd.print(F(" MEMORY IS FULL"));
        lcd.setCursor(0, 1);
        lcd.print(F("****************"));
        for (int x = 0; x < 3; x++)
        {
          digitalWrite(buzz, HIGH);
          delay(100);
          digitalWrite(buzz, LOW);
          delay(100);
        }
        delay(2000);
        lcd.clear();
        break;
      }
      else
      {
        eeprom_write(chip_1, ID, data);
        lcd.clear();
        lcd.setCursor(1, 0);
        lcd.print(F("ID:" ));
        lcd.print(StrID);
        lcd.setCursor(0, 1);
        lcd.print(F("   THANK YOU    "));
        digitalWrite(buzz, HIGH);
        delay(100);
        digitalWrite(buzz, LOW);
        delay(2500);
        lcd.clear();
        break;
      }
    }
    if ((StrID != database[ID]) && (ID == max_database_size - 1))
    {
      lcd.clear();
      lcd.setCursor(0, 0);
      lcd.print(F(" YOUR ID IS NOT  "));
      lcd.setCursor(0, 1);
      lcd.print(F("   REGISTERED  "));
      for (int x = 0; x < 3; x++)
      {
        digitalWrite(buzz, HIGH);
        delay(100);
        digitalWrite(buzz, LOW);
        delay(100);
      }
      delay(2500);
      lcd.clear();
    }
  }
}

void eeprom_write(int deviceaddress, unsigned int eeaddress, byte data)
{
  Wire.beginTransmission(deviceaddress);
  Wire.write((byte)(eeaddress >> 8));
  Wire.write((byte)(eeaddress & 0xFF));
  Wire.write(data);
  Wire.endTransmission();
  delay(5);
}

byte eeprom_read(int deviceaddress, unsigned int eeaddress)
{
  byte rdata = 0xFF;
  Wire.beginTransmission(deviceaddress);
  Wire.write((byte)(eeaddress >> 8));
  Wire.write((byte)(eeaddress & 0xFF));
  Wire.endTransmission();
  Wire.requestFrom(deviceaddress, 1);
  if (Wire.available()) rdata = Wire.read();
  return rdata;
}